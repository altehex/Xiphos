This doc helps getting started with contribuitng to ThanatOS. It covers the build system, the repository structure,
conventions, languages, etc.

Table of contents:
-------------------------------------------------------------------------------------------------------*
- BUILDING THANATOS
- SUPPORTED TARGETS
- REPOSITORY FILE TREE STRUCTURE
- PROGRAMMING LANGUAGES


|   BUILDING THANATOS
+------------------------------------------------------------------------------------------------------*
This project uses GNU Make. One may invoke just 'make' to build ThanatOS. 'make help' outputs the targets. check.sh
checks for software dependencies and starts make after a prompt.

Requirements:
- make
- bash 
- gcc or clang
- ld or ld.lld

Building ThanatOS from its installation image is planned for the future, but it's not happening in the near future as
it requires porting some build system or making one from scratch for the system.


|   SUPPORTED TARGETS
+------------------------------------------------------------------------------------------------------*
The only supported target now is x86_64. ARM support is planned. ThanatOS bootloader only supports UEFI, but BIOS support
is planned too (it's not hard to implement it).



|   REPOSITORY FILE TREE STRUCTURE
+------------------------------------------------------------------------------------------------------*
|- /boot - bootloader, kernel initialization code;
|- /firmware - BIOS/UEFI, ACPI related stuff;
|  |- /bios - BIOS-related stuff (WIP)
|  +- /uefi - UEFI-related stuff
|- /include - headers;
+- /kernel - the main source files of the kernel;



|   PROGRAMMING LANGUAGES
+------------------------------------------------------------------------------------------------------*
The main language of the kernel and the bootloader is C. Additional modules can be written in C++.
Usage of assembly is possible (fasm by defauilt).

Usage of the following languages may be possible in the future:
- Pascal
- Forth
- Ada
- Rust


|   CONVENTIONS
+------------------------------------------------------------------------------------------------------*

NAMING:
--------------------------------
Use snake_case for function names and function pointer typedefs(end those with _t).
Use camelCase for variable and structure names. Structure names should start with a capital letter(CamelCase).
Use SNAKE_CASE_WITH_CAPITAL_LETTERS for macros and Makefile variables.
Use single underscore prefix for thunks and stubs. Two underscores are usually for internal functions.
